apiVersion: v1
kind: ConfigMap
metadata:
  name: kapacitor
  labels:
    k8s-app: kapacitor
data:
  cpu_alert.tick: |+
    dbrp "mydb"."autogen"
    stream
      |from()
        .measurement('cpu')
        .groupBy('host')
      |window()
       .period(1s)
      |alert()
       .id('{{ index .Tags "host"}}/cpu_used')
       .crit(lambda: int("usage_idle") <  80)
       .stateChangesOnly()
       .log('/tmp/alerts.log')
       //.slack()
  kapacitor.conf: |+
    hostname = "kapacitor"
    data_dir = "/var/lib/kapacitor"

    [replay]
      dir = "/var/lib/kapacitor/replay"

    [storage]
      boltdb = "/var/lib/kapacitor/kapacitor.db"

    [load]
      enabled = true
      dir = "/etc/kapacitor"

    [[influxdb]]
      enabled = true
      default = true
      name = "influx"
      urls = ["$KAPACITOR_INFLUXDB_0_URLS_0"]
      username = "$KAPACITOR_USER"
      password = "$KAPACITOR_PASS"
      timeout = 0

---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  labels:
    app: kapacitor
  name: kapacitor
spec:
  progressDeadlineSeconds: 600
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: kapacitor
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: kapacitor
    spec:
      containers:
        - envFrom:
            - secretRef:
                name: kapacitor-creds
          image: kapacitor
          imagePullPolicy: Always
          name: kapacitor
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
            - name: config
              mountPath: /etc/kapacitor
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 10
      volumes:
        - name: config
          configMap:
            name: kapacitor
